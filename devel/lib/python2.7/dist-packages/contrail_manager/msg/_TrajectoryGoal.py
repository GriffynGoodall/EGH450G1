# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from contrail_manager/TrajectoryGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class TrajectoryGoal(genpy.Message):
  _md5sum = "a166dd977ac797109115269573bf89e1"
  _type = "contrail_manager/TrajectoryGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
#
# start: time at which to start the movement (immidiately if 0)
# duration: duration of time the movement should take to complete
# x/y/z/yaw: points defining a movement trajectory
#			 start and end points must be provided
#			 additional points will be used for spline interpolatation
time start
duration duration
geometry_msgs/Vector3[] positions
float64[] yaws

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['start','duration','positions','yaws']
  _slot_types = ['time','duration','geometry_msgs/Vector3[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,duration,positions,yaws

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = genpy.Time()
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.positions is None:
        self.positions = []
      if self.yaws is None:
        self.yaws = []
    else:
      self.start = genpy.Time()
      self.duration = genpy.Duration()
      self.positions = []
      self.yaws = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i().pack(_x.start.secs, _x.start.nsecs, _x.duration.secs, _x.duration.nsecs))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.positions:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.yaws)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.yaws))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = genpy.Time()
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.positions is None:
        self.positions = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.start.secs, _x.start.nsecs, _x.duration.secs, _x.duration.nsecs,) = _get_struct_2I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.positions = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.yaws = struct.unpack(pattern, str[start:end])
      self.start.canon()
      self.duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i().pack(_x.start.secs, _x.start.nsecs, _x.duration.secs, _x.duration.nsecs))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.positions:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.yaws)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.yaws.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = genpy.Time()
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.positions is None:
        self.positions = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.start.secs, _x.start.nsecs, _x.duration.secs, _x.duration.nsecs,) = _get_struct_2I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.positions = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.yaws = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.start.canon()
      self.duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i = None
def _get_struct_2I2i():
    global _struct_2I2i
    if _struct_2I2i is None:
        _struct_2I2i = struct.Struct("<2I2i")
    return _struct_2I2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
