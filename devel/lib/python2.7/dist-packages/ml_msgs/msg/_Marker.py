# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ml_msgs/Marker.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Marker(genpy.Message):
  _md5sum = "3fc44c2cb27f5503bc7ad49b3ff1f830"
  _type = "ml_msgs/Marker"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This expresses a marker in a 3D space
int32 marker_id           # id of the marker detected
float64 marker_confidence  # confidence that this marker is identified correctly

int32 rows                # number of rows of tags in this marker
int32 cols                # number of cols of tags in this marker

int32[] tag_ids           # possible ids of the detected marker (empty if no id could be identified)
float64[] tag_confidence  # confidence of the possible ids in 0 -> 1 (empty if no id could be identified)

geometry_msgs/Pose pose   # pose of the detected marker/fiducial

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['marker_id','marker_confidence','rows','cols','tag_ids','tag_confidence','pose']
  _slot_types = ['int32','float64','int32','int32','int32[]','float64[]','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       marker_id,marker_confidence,rows,cols,tag_ids,tag_confidence,pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Marker, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.marker_id is None:
        self.marker_id = 0
      if self.marker_confidence is None:
        self.marker_confidence = 0.
      if self.rows is None:
        self.rows = 0
      if self.cols is None:
        self.cols = 0
      if self.tag_ids is None:
        self.tag_ids = []
      if self.tag_confidence is None:
        self.tag_confidence = []
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
    else:
      self.marker_id = 0
      self.marker_confidence = 0.
      self.rows = 0
      self.cols = 0
      self.tag_ids = []
      self.tag_confidence = []
      self.pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_id2i().pack(_x.marker_id, _x.marker_confidence, _x.rows, _x.cols))
      length = len(self.tag_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.tag_ids))
      length = len(self.tag_confidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.tag_confidence))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.marker_id, _x.marker_confidence, _x.rows, _x.cols,) = _get_struct_id2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.tag_ids = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tag_confidence = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 56
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_id2i().pack(_x.marker_id, _x.marker_confidence, _x.rows, _x.cols))
      length = len(self.tag_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.tag_ids.tostring())
      length = len(self.tag_confidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tag_confidence.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.marker_id, _x.marker_confidence, _x.rows, _x.cols,) = _get_struct_id2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.tag_ids = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tag_confidence = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 56
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_id2i = None
def _get_struct_id2i():
    global _struct_id2i
    if _struct_id2i is None:
        _struct_id2i = struct.Struct("<id2i")
    return _struct_id2i
