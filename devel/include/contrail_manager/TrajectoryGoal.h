// Generated by gencpp from file contrail_manager/TrajectoryGoal.msg
// DO NOT EDIT!


#ifndef CONTRAIL_MANAGER_MESSAGE_TRAJECTORYGOAL_H
#define CONTRAIL_MANAGER_MESSAGE_TRAJECTORYGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace contrail_manager
{
template <class ContainerAllocator>
struct TrajectoryGoal_
{
  typedef TrajectoryGoal_<ContainerAllocator> Type;

  TrajectoryGoal_()
    : start()
    , duration()
    , positions()
    , yaws()  {
    }
  TrajectoryGoal_(const ContainerAllocator& _alloc)
    : start()
    , duration()
    , positions(_alloc)
    , yaws(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _start_type;
  _start_type start;

   typedef ros::Duration _duration_type;
  _duration_type duration;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _positions_type;
  _positions_type positions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _yaws_type;
  _yaws_type yaws;





  typedef boost::shared_ptr< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryGoal_

typedef ::contrail_manager::TrajectoryGoal_<std::allocator<void> > TrajectoryGoal;

typedef boost::shared_ptr< ::contrail_manager::TrajectoryGoal > TrajectoryGoalPtr;
typedef boost::shared_ptr< ::contrail_manager::TrajectoryGoal const> TrajectoryGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::contrail_manager::TrajectoryGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::contrail_manager::TrajectoryGoal_<ContainerAllocator1> & lhs, const ::contrail_manager::TrajectoryGoal_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.duration == rhs.duration &&
    lhs.positions == rhs.positions &&
    lhs.yaws == rhs.yaws;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::contrail_manager::TrajectoryGoal_<ContainerAllocator1> & lhs, const ::contrail_manager::TrajectoryGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace contrail_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a166dd977ac797109115269573bf89e1";
  }

  static const char* value(const ::contrail_manager::TrajectoryGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa166dd977ac79710ULL;
  static const uint64_t static_value2 = 0x9115269573bf89e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "contrail_manager/TrajectoryGoal";
  }

  static const char* value(const ::contrail_manager::TrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"#\n"
"# start: time at which to start the movement (immidiately if 0)\n"
"# duration: duration of time the movement should take to complete\n"
"# x/y/z/yaw: points defining a movement trajectory\n"
"#			 start and end points must be provided\n"
"#			 additional points will be used for spline interpolatation\n"
"time start\n"
"duration duration\n"
"geometry_msgs/Vector3[] positions\n"
"float64[] yaws\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::contrail_manager::TrajectoryGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.duration);
      stream.next(m.positions);
      stream.next(m.yaws);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::contrail_manager::TrajectoryGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::contrail_manager::TrajectoryGoal_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.positions[i]);
    }
    s << indent << "yaws[]" << std::endl;
    for (size_t i = 0; i < v.yaws.size(); ++i)
    {
      s << indent << "  yaws[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaws[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTRAIL_MANAGER_MESSAGE_TRAJECTORYGOAL_H
