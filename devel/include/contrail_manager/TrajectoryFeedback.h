// Generated by gencpp from file contrail_manager/TrajectoryFeedback.msg
// DO NOT EDIT!


#ifndef CONTRAIL_MANAGER_MESSAGE_TRAJECTORYFEEDBACK_H
#define CONTRAIL_MANAGER_MESSAGE_TRAJECTORYFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace contrail_manager
{
template <class ContainerAllocator>
struct TrajectoryFeedback_
{
  typedef TrajectoryFeedback_<ContainerAllocator> Type;

  TrajectoryFeedback_()
    : progress(0.0)
    , position()
    , velocity()
    , acceleration()
    , yaw(0.0)
    , yawrate(0.0)  {
    }
  TrajectoryFeedback_(const ContainerAllocator& _alloc)
    : progress(0.0)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , yaw(0.0)
    , yawrate(0.0)  {
  (void)_alloc;
    }



   typedef double _progress_type;
  _progress_type progress;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yawrate_type;
  _yawrate_type yawrate;





  typedef boost::shared_ptr< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryFeedback_

typedef ::contrail_manager::TrajectoryFeedback_<std::allocator<void> > TrajectoryFeedback;

typedef boost::shared_ptr< ::contrail_manager::TrajectoryFeedback > TrajectoryFeedbackPtr;
typedef boost::shared_ptr< ::contrail_manager::TrajectoryFeedback const> TrajectoryFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator1> & lhs, const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.progress == rhs.progress &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.yaw == rhs.yaw &&
    lhs.yawrate == rhs.yawrate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator1> & lhs, const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace contrail_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb2e5cf58d09101da21a3449b40e4563";
  }

  static const char* value(const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb2e5cf58d09101dULL;
  static const uint64_t static_value2 = 0xa21a3449b40e4563ULL;
};

template<class ContainerAllocator>
struct DataType< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "contrail_manager/TrajectoryFeedback";
  }

  static const char* value(const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"#\n"
"# progress: current progress (%) through the movement (-1 if not started)\n"
"# position: current instantaneous position\n"
"# velocity: current instantaneous velocity\n"
"float64 progress\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"float64 yaw\n"
"float64 yawrate\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.progress);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.yaw);
      stream.next(m.yawrate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::contrail_manager::TrajectoryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::contrail_manager::TrajectoryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "progress: ";
    Printer<double>::stream(s, indent + "  ", v.progress);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yawrate: ";
    Printer<double>::stream(s, indent + "  ", v.yawrate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTRAIL_MANAGER_MESSAGE_TRAJECTORYFEEDBACK_H
