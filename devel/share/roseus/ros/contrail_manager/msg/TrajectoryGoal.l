;; Auto-generated. Do not edit!


(when (boundp 'contrail_manager::TrajectoryGoal)
  (if (not (find-package "CONTRAIL_MANAGER"))
    (make-package "CONTRAIL_MANAGER"))
  (shadow 'TrajectoryGoal (find-package "CONTRAIL_MANAGER")))
(unless (find-package "CONTRAIL_MANAGER::TRAJECTORYGOAL")
  (make-package "CONTRAIL_MANAGER::TRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude TrajectoryGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass contrail_manager::TrajectoryGoal
  :super ros::object
  :slots (_start _duration _positions _yaws ))

(defmethod contrail_manager::TrajectoryGoal
  (:init
   (&key
    ((:start __start) (instance ros::time :init))
    ((:duration __duration) (instance ros::time :init))
    ((:positions __positions) (let (r) (dotimes (i 0) (push (instance geometry_msgs::Vector3 :init) r)) r))
    ((:yaws __yaws) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _start __start)
   (setq _duration __duration)
   (setq _positions __positions)
   (setq _yaws __yaws)
   self)
  (:start
   (&optional __start)
   (if __start (setq _start __start)) _start)
  (:duration
   (&optional __duration)
   (if __duration (setq _duration __duration)) _duration)
  (:positions
   (&rest __positions)
   (if (keywordp (car __positions))
       (send* _positions __positions)
     (progn
       (if __positions (setq _positions (car __positions)))
       _positions)))
  (:yaws
   (&optional __yaws)
   (if __yaws (setq _yaws __yaws)) _yaws)
  (:serialization-length
   ()
   (+
    ;; time _start
    8
    ;; duration _duration
    8
    ;; geometry_msgs/Vector3[] _positions
    (apply #'+ (send-all _positions :serialization-length)) 4
    ;; float64[] _yaws
    (* 8    (length _yaws)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; time _start
       (write-long (send _start :sec) s) (write-long (send _start :nsec) s)
     ;; duration _duration
       (write-long (send _duration :sec) s) (write-long (send _duration :nsec) s)
     ;; geometry_msgs/Vector3[] _positions
     (write-long (length _positions) s)
     (dolist (elem _positions)
       (send elem :serialize s)
       )
     ;; float64[] _yaws
     (write-long (length _yaws) s)
     (dotimes (i (length _yaws))
       (sys::poke (elt _yaws i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; time _start
     (send _start :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _start :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; duration _duration
     (send _duration :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _duration :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; geometry_msgs/Vector3[] _positions
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _positions (let (r) (dotimes (i n) (push (instance geometry_msgs::Vector3 :init) r)) r))
     (dolist (elem- _positions)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; float64[] _yaws
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _yaws (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _yaws i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;;
   self)
  )

(setf (get contrail_manager::TrajectoryGoal :md5sum-) "a166dd977ac797109115269573bf89e1")
(setf (get contrail_manager::TrajectoryGoal :datatype-) "contrail_manager/TrajectoryGoal")
(setf (get contrail_manager::TrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
#
# start: time at which to start the movement (immidiately if 0)
# duration: duration of time the movement should take to complete
# x/y/z/yaw: points defining a movement trajectory
#			 start and end points must be provided
#			 additional points will be used for spline interpolatation
time start
duration duration
geometry_msgs/Vector3[] positions
float64[] yaws

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :contrail_manager/TrajectoryGoal "a166dd977ac797109115269573bf89e1")


